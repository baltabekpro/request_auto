// Content script –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤
(function() {
    'use strict';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    function checkExtensionContext() {
        if (!chrome.runtime || !chrome.runtime.id) {
            console.warn('Content: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
            return false;
        }
        return true;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ chrome.runtime.sendMessage —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    function safeSendMessage(message, callback) {
        if (!checkExtensionContext()) {
            console.warn('Content: –ü—Ä–æ–ø—É—Å–∫ sendMessage –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
            if (callback) callback({ error: 'Extension context invalidated' });
            return;
        }
        
        try {
            chrome.runtime.sendMessage(message, (response) => {
                if (chrome.runtime.lastError) {
                    console.warn('Content: Runtime lastError:', chrome.runtime.lastError.message);
                    if (callback) callback({ error: chrome.runtime.lastError.message });
                } else {
                    if (callback) callback(response);
                }
            });
        } catch (error) {
            console.warn('Content: –û—à–∏–±–∫–∞ sendMessage:', error.message);
            if (callback) callback({ error: error.message });
        }
    }
    
    let isMonitoring = false;
    let chatMonitorInterval = null;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ HTML
    function parseMessageTime(timeString) {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ "21.09.2025 10:20:06"
        const match = timeString.match(/(\d{2})\.(\d{2})\.(\d{4})\s+(\d{2}):(\d{2}):(\d{2})/);
        if (match) {
            const [, day, month, year, hour, minute, second] = match;
            return new Date(year, month - 1, day, hour, minute, second);
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è "10:20"
        const timeMatch = timeString.match(/(\d{2}):(\d{2})/);
        if (timeMatch) {
            const [, hour, minute] = timeMatch;
            const now = new Date();
            const messageTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, minute);
            return messageTime;
        }
        
        return null;
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    function normalizePhoneNumber(phone) {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        const digits = phone.replace(/\D/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
        if (digits.length === 10 && digits.startsWith('7')) {
            // 7007077777 -> +7 700 707 77 77
            return '+7 ' + digits.substring(1, 4) + ' ' + digits.substring(4, 7) + ' ' + digits.substring(7, 9) + ' ' + digits.substring(9, 11);
        } else if (digits.length === 11 && digits.startsWith('87')) {
            // 87007077777 -> +7 700 707 77 77
            return '+7 ' + digits.substring(2, 5) + ' ' + digits.substring(5, 8) + ' ' + digits.substring(8, 10) + ' ' + digits.substring(10, 12);
        } else if (digits.length === 11 && digits.startsWith('77')) {
            // 77007077777 -> +7 700 707 77 77
            return '+7 ' + digits.substring(2, 5) + ' ' + digits.substring(5, 8) + ' ' + digits.substring(8, 10) + ' ' + digits.substring(10, 12);
        } else if (digits.length === 10 && !digits.startsWith('7')) {
            // 7007077777 (–±–µ–∑ –ø–µ—Ä–≤–æ–π 7) -> +7 700 707 77 77
            return '+7 ' + digits.substring(0, 3) + ' ' + digits.substring(3, 6) + ' ' + digits.substring(6, 8) + ' ' + digits.substring(8, 10);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å +7
        if (digits.length >= 10) {
            return '+7 ' + digits.substring(digits.length - 10, digits.length - 7) + ' ' + 
                   digits.substring(digits.length - 7, digits.length - 4) + ' ' + 
                   digits.substring(digits.length - 4, digits.length - 2) + ' ' + 
                   digits.substring(digits.length - 2);
        }
        
        return phone; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
    }
    
    function findPhoneNumbers(text) {
        const phoneNumbers = new Set(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        const phonePatterns = [
            // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ —Å –∫–æ–¥–æ–º +7 –∏–ª–∏ 8
            /\+?7\s*[\-\(\)]?\s*[0-9]{3}\s*[\-\(\)]?\s*[0-9]{3}\s*[\-\(\)]?\s*[0-9]{2}\s*[\-\(\)]?\s*[0-9]{2}/g,
            /8\s*[\-\(\)]?\s*[0-9]{3}\s*[\-\(\)]?\s*[0-9]{3}\s*[\-\(\)]?\s*[0-9]{2}\s*[\-\(\)]?\s*[0-9]{2}/g,
            // –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            /\b[78][0-9]{10}\b/g,
            /\b[0-9]{10}\b/g,
            // –° —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            /\b[78][\s\-\(\)]*[0-9]{3}[\s\-\(\)]*[0-9]{3}[\s\-\(\)]*[0-9]{2}[\s\-\(\)]*[0-9]{2}\b/g,
            // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            /\+7[\s\-\(\)]*[0-9]{3}[\s\-\(\)]*[0-9]{3}[\s\-\(\)]*[0-9]{2}[\s\-\(\)]*[0-9]{2}/g
        ];
        
        phonePatterns.forEach(pattern => {
            const matches = text.match(pattern);
            if (matches) {
                matches.forEach(match => {
                    const cleaned = match.trim();
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    const digits = cleaned.replace(/\D/g, '');
                    if (digits.length >= 10 && digits.length <= 12) {
                        const normalized = normalizePhoneNumber(cleaned);
                        phoneNumbers.add(normalized);
                    }
                });
            }
        });
        
        return Array.from(phoneNumbers);
    }
    
    function extractPhonesFromChat() {
        const phones = new Set();
        
        // –ò—â–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        const messages = document.querySelectorAll('.message, .msg, .chat-message, [class*="message"], [class*="msg"]');
        
        if (messages.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º, –∏—â–µ–º –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const pageText = document.body.innerText;
            const foundPhones = findPhoneNumbers(pageText);
            foundPhones.forEach(phone => phones.add(phone));
        } else {
            // –ò—â–µ–º –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            messages.forEach(message => {
                const messageText = message.innerText || message.textContent || '';
                const foundPhones = findPhoneNumbers(messageText);
                foundPhones.forEach(phone => phones.add(phone));
            });
        }
        
        // –¢–∞–∫–∂–µ –∏—â–µ–º –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        const inputs = document.querySelectorAll('input[type="text"], textarea, [contenteditable="true"]');
        inputs.forEach(input => {
            const inputText = input.value || input.innerText || input.textContent || '';
            const foundPhones = findPhoneNumbers(inputText);
            foundPhones.forEach(phone => phones.add(phone));
        });
        
        console.log('Content: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:', Array.from(phones));
        return Array.from(phones);
    }
    
    function copyToClipboard(text) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(text).then(() => {
                showNotification('üì± –ù–æ–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + text, 'success');
            }).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
                fallbackCopyToClipboard(text);
            });
        } else {
            fallbackCopyToClipboard(text);
        }
    }
    
    function fallbackCopyToClipboard(text) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            const successful = document.execCommand('copy');
            if (successful) {
                showNotification('üì± –ù–æ–º–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ' + text, 'success');
            } else {
                showNotification('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä', 'error');
            }
        } catch (err) {
            console.error('Fallback: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç', err);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
        
        document.body.removeChild(textArea);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö
    function extractChatInfo() {
        const chats = [];
        
        try {
            // –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞—Ç–æ–≤ –ø–æ ID –ø–∞—Ç—Ç–µ—Ä–Ω—É name_XXXXXX
            const chatElements = document.querySelectorAll('td[id^="name_"]');
            
            console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —á–∞—Ç–æ–≤: ${chatElements.length}`);
            
            for (const chatElement of chatElements) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ id
                const idMatch = chatElement.id.match(/name_(\d+)/);
                if (!idMatch) continue;
                
                const chatId = idMatch[1];
                const chatText = chatElement.textContent || chatElement.innerText;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ (–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç)
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –Ω–µ–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏
                const isPinned = false; // –ú–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
                const timeMatch = chatText.match(/(\d{1,2}):(\d{2})$/);
                let lastMessageTime = null;
                
                if (timeMatch) {
                    const [, hour, minute] = timeMatch;
                    const now = new Date();
                    
                    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
                    lastMessageTime = new Date(
                        now.getFullYear(), 
                        now.getMonth(), 
                        now.getDate(), 
                        parseInt(hour), 
                        parseInt(minute)
                    );
                    
                    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞
                    if (lastMessageTime > now) {
                        lastMessageTime.setDate(lastMessageTime.getDate() - 1);
                    }
                }
                
                const chatInfo = {
                    id: chatId,
                    isPinned: isPinned,
                    lastMessageTime: lastMessageTime,
                    url: window.location.href,
                    element: chatElement,
                    text: chatText
                };
                
                chats.push(chatInfo);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ –≤—ã–¥–µ–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (lastMessageTime) {
                    const now = new Date();
                    const timeDiff = now - lastMessageTime;
                    const minutesDiff = Math.floor(timeDiff / (1000 * 60));
                    
                    console.log(`–ß–∞—Ç ${chatId}: –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${minutesDiff} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥`);
                    
                    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 18 –∏–ª–∏ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç, –≤—ã–¥–µ–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–º
                    if (minutesDiff >= 18) {
                        chatElement.style.backgroundColor = '#ffebee';
                        chatElement.style.borderLeft = '4px solid #f44336';
                        chatElement.style.color = '#d32f2f';
                        
                        console.log(`–ß–∞—Ç ${chatId} –≤—ã–¥–µ–ª–µ–Ω –∫—Ä–∞—Å–Ω—ã–º - ${minutesDiff} –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`);
                    } else {
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
                        chatElement.style.backgroundColor = '';
                        chatElement.style.borderLeft = '';
                        chatElement.style.color = '';
                    }
                }
            }
            
            console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:', chats);
            return chats;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö:', error);
            return [];
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    function checkChatActivity() {
        const chats = extractChatInfo();
        const now = new Date();
        const eighteenMinutesInMs = 18 * 60 * 1000; // 18 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        for (const chat of chats) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
            if (!chat.isPinned && chat.lastMessageTime) {
                const timeDiff = now - chat.lastMessageTime;
                const minutesDiff = Math.floor(timeDiff / 60000);
                
                if (timeDiff >= eighteenMinutesInMs) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background script –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    safeSendMessage({
                        type: 'CHAT_NEEDS_CLOSING',
                        chatId: chat.id,
                        timeSinceLastMessage: minutesDiff,
                        url: chat.url
                    });
                    
                    console.log(`–ß–∞—Ç ${chat.id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ${minutesDiff} –º–∏–Ω—É—Ç - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`);
                }
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    function startMonitoring() {
        if (isMonitoring) return;
        
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤...');
        isMonitoring = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        chatMonitorInterval = setInterval(() => {
            checkChatActivity();
            updateChatHighlighting(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–∞—Ç–æ–≤
        }, 30000);
        
        // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        checkChatActivity();
        updateChatHighlighting();
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤
    function updateChatHighlighting() {
        const chatElements = document.querySelectorAll('td[id^="name_"]');
        const now = new Date();
        
        for (const chatElement of chatElements) {
            const chatText = chatElement.textContent || chatElement.innerText;
            const timeMatch = chatText.match(/(\d{1,2}):(\d{2})$/);
            
            if (timeMatch) {
                const [, hour, minute] = timeMatch;
                const lastMessageTime = new Date(
                    now.getFullYear(), 
                    now.getMonth(), 
                    now.getDate(), 
                    parseInt(hour), 
                    parseInt(minute)
                );
                
                // –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞
                if (lastMessageTime > now) {
                    lastMessageTime.setDate(lastMessageTime.getDate() - 1);
                }
                
                const timeDiff = now - lastMessageTime;
                const minutesDiff = Math.floor(timeDiff / (1000 * 60));
                
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 18 –∏–ª–∏ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç, –≤—ã–¥–µ–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–º
                if (minutesDiff >= 18) {
                    chatElement.style.backgroundColor = '#ffebee';
                    chatElement.style.borderLeft = '4px solid #f44336';
                    chatElement.style.color = '#d32f2f';
                    chatElement.style.fontWeight = 'bold';
                } else {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
                    chatElement.style.backgroundColor = '';
                    chatElement.style.borderLeft = '';
                    chatElement.style.color = '';
                    chatElement.style.fontWeight = '';
                }
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    function stopMonitoring() {
        if (!isMonitoring) return;
        
        console.log('–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤...');
        isMonitoring = false;
        
        if (chatMonitorInterval) {
            clearInterval(chatMonitorInterval);
            chatMonitorInterval = null;
        }
    }
    
    // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        switch (request.type) {
            case 'START_MONITORING':
                startMonitoring();
                sendResponse({ success: true });
                break;
                
            case 'STOP_MONITORING':
                stopMonitoring();
                sendResponse({ success: true });
                break;
                
            case 'GET_CHAT_INFO':
                const chatInfo = extractChatInfo();
                sendResponse({ chats: chatInfo });
                break;
                
            default:
                sendResponse({ error: 'Unknown message type' });
        }
    });
    
    // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        switch (request.action) {
            case 'getAllTextFromActiveElement':
                console.log('Content script: –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
                const text = getAllTextFromActiveElement();
                console.log('Content script: –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π:', text.length, '—Å–∏–º–≤–æ–ª–æ–≤');
                sendResponse({ text });
                break;
                
            case 'replaceAllTextInActiveElement':
                const success = replaceAllTextInActiveElement(request.newText);
                sendResponse({ success });
                break;
                
            case 'showNotification':
                showNotification(request.message, request.type);
                sendResponse({ success: true });
                break;
                
            default:
                // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
                break;
        }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–æ–≤
    function detectChatInterface() {
        const chatElements = document.querySelectorAll('.panel-heading');
        const hasChats = Array.from(chatElements).some(el => 
            el.textContent.includes('–î–∏–∞–ª–æ–≥ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω') || 
            el.textContent.includes('–î–∏–∞–ª–æ–≥ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω')
        );
        
        if (hasChats) {
            console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
            startMonitoring();
        }
    }
    
    // –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–∞—Ç–æ–≤
                detectChatInterface();
            }
        });
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', detectChatInterface);
    } else {
        detectChatInterface();
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    function getAllTextFromActiveElement() {
        const activeElement = document.activeElement;
        console.log('–ê–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:', activeElement ? activeElement.tagName : '–Ω–µ—Ç');
        
        if (activeElement && (activeElement.tagName === 'TEXTAREA' || 
            (activeElement.tagName === 'INPUT' && activeElement.type === 'text'))) {
            console.log('–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º:', activeElement.value.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            return activeElement.value;
        }
        
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        const textareas = document.querySelectorAll('textarea');
        const textInputs = document.querySelectorAll('input[type="text"]');
        
        console.log('–ù–∞–π–¥–µ–Ω–æ textarea:', textareas.length, ', text inputs:', textInputs.length);
        
        if (textareas.length > 0) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π textarea —Å —Ç–µ–∫—Å—Ç–æ–º:', textareas[0].value.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            return textareas[0].value;
        }
        
        if (textInputs.length > 0) {
            console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π text input —Å —Ç–µ–∫—Å—Ç–æ–º:', textInputs[0].value.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            return textInputs[0].value;
        }
        
        console.log('–¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return '';
    }
    
    // –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
    function replaceAllTextInActiveElement(newText) {
        const activeElement = document.activeElement;
        
        if (activeElement && (activeElement.tagName === 'TEXTAREA' || 
            (activeElement.tagName === 'INPUT' && activeElement.type === 'text'))) {
            activeElement.value = newText;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const event = new Event('input', { bubbles: true });
            activeElement.dispatchEvent(event);
            
            return true;
        }
        
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        const textareas = document.querySelectorAll('textarea');
        const textInputs = document.querySelectorAll('input[type="text"]');
        
        if (textareas.length > 0) {
            textareas[0].value = newText;
            const event = new Event('input', { bubbles: true });
            textareas[0].dispatchEvent(event);
            return true;
        }
        
        if (textInputs.length > 0) {
            textInputs[0].value = newText;
            const event = new Event('input', { bubbles: true });
            textInputs[0].dispatchEvent(event);
            return true;
        }
        
        return false;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    function showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const style = document.createElement('style');
        style.textContent = `
            .chat-monitor-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 12px 20px;
                border-radius: 6px;
                color: white;
                font-family: Arial, sans-serif;
                font-size: 14px;
                z-index: 10000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                transition: all 0.3s ease;
            }
            .chat-monitor-notification.info { background-color: #2196F3; }
            .chat-monitor-notification.success { background-color: #4CAF50; }
            .chat-monitor-notification.error { background-color: #f44336; }
            .chat-monitor-notification.fadeout {
                opacity: 0;
                transform: translateX(100%);
            }
        `;
        
        if (!document.querySelector('#chat-monitor-styles')) {
            style.id = 'chat-monitor-styles';
            document.head.appendChild(style);
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `chat-monitor-notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.classList.add('fadeout');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ò—Å–ø—Ä–∞–≤–∏—Ç—å" —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–®–∞–±–ª–æ–Ω—ã"
    function addCorrectButton() {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–®–∞–±–ª–æ–Ω—ã"
        const templateButton = document.querySelector('button[onclick*="popup_templates"]');
        
        if (templateButton && !document.querySelector('#correct-text-button')) {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ò—Å–ø—Ä–∞–≤–∏—Ç—å"
            const correctButton = document.createElement('button');
            correctButton.id = 'correct-text-button';
            correctButton.className = 'btn-tab-enabled req-form-input';
            correctButton.style.whiteSpace = 'nowrap';
            correctButton.style.marginLeft = '5px';
            correctButton.textContent = '–ò—Å–ø—Ä–∞–≤–∏—Ç—å';
            
            correctButton.onclick = async function() {
                console.log('Content: –ö–Ω–æ–ø–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞');
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    if (!chrome.runtime || !chrome.runtime.id) {
                        console.warn('Content: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                        alert('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.');
                        return;
                    }
                    
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –∏–∑ –∫–æ–¥–∞
                    let apiKey = null;
                    
                    if (typeof getGeminiApiKey === 'function') {
                        apiKey = getGeminiApiKey();
                        console.log('Content: API –∫–ª—é—á –∏–∑ –∫–æ–¥–∞:', apiKey ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                    
                    // –ï—Å–ª–∏ –≤ –∫–æ–¥–µ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ runtime (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫)
                    if (!apiKey) {
                        try {
                            const apiKeyResponse = await new Promise((resolve, reject) => {
                                safeSendMessage({ type: 'GET_API_KEY' }, (response) => {
                                    if (response?.error) {
                                        reject(new Error(response.error));
                                    } else {
                                        resolve(response);
                                    }
                                });
                            });
                            apiKey = apiKeyResponse?.apiKey;
                            console.log('Content: API –∫–ª—é—á –∏–∑ runtime:', apiKey ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
                        } catch (runtimeError) {
                            console.warn('Content: –û—à–∏–±–∫–∞ runtime API:', runtimeError.message);
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ runtime API
                        }
                    }
                    
                    if (!apiKey) {
                        alert('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n2. –ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª api-config.js\n3. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É');
                        return;
                    }
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫)
                    try {
                        await new Promise((resolve, reject) => {
                            safeSendMessage({ 
                                type: 'CORRECT_ALL_TEXT',
                                apiKey: apiKey 
                            }, (response) => {
                                if (response?.error) {
                                    reject(new Error(response.error));
                                } else {
                                    console.log('Content: –û—Ç–≤–µ—Ç –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', response);
                                    if (response && response.success) {
                                        console.log('Content: –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
                                        resolve(response);
                                    } else {
                                        console.error('Content: –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', response?.error);
                                        reject(new Error(response?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                                    }
                                }
                            });
                        });
                    } catch (correctionError) {
                        console.error('Content: –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', correctionError.message);
                        alert('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ' + correctionError.message + '\n\n–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                    }
                } catch (error) {
                    console.error('Content: –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
                    alert('–û–±—â–∞—è –æ—à–∏–±–∫–∞: ' + error.message + '\n\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }
            };
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–®–∞–±–ª–æ–Ω—ã"
            templateButton.parentNode.insertBefore(correctButton, templateButton.nextSibling);
            
            // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
            updatePhoneNumbersDisplay();
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    function updatePhoneNumbersDisplay() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const existingPhoneBlock = document.querySelector('#phone-numbers-block');
        if (existingPhoneBlock) {
            existingPhoneBlock.remove();
        }
        
        // –ò—â–µ–º –Ω–æ–º–µ—Ä–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        const phoneNumbers = extractPhonesFromChat();
        
        if (phoneNumbers.length === 0) {
            return; // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (—Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        const correctButton = document.querySelector('#correct-text-button');
        if (!correctButton) {
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤
        const phoneBlock = document.createElement('div');
        phoneBlock.id = 'phone-numbers-block';
        phoneBlock.style.cssText = `
            margin-top: 10px;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: #f9f9f9;
            font-size: 12px;
            max-width: 100%;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.createElement('div');
        title.textContent = 'üì± –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:';
        title.style.cssText = `
            font-weight: bold;
            margin-bottom: 5px;
            color: #333;
        `;
        phoneBlock.appendChild(title);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤
        const numbersContainer = document.createElement('div');
        numbersContainer.style.cssText = `
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        phoneNumbers.forEach(phone => {
            const phoneElement = document.createElement('span');
            phoneElement.textContent = phone;
            phoneElement.style.cssText = `
                background-color: #e8f4fd;
                border: 1px solid #0066cc;
                border-radius: 3px;
                padding: 3px 6px;
                cursor: pointer;
                color: #0066cc;
                font-family: monospace;
                white-space: nowrap;
                transition: background-color 0.2s;
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç
            phoneElement.addEventListener('mouseenter', function() {
                this.style.backgroundColor = '#d4edda';
                this.style.borderColor = '#28a745';
                this.style.color = '#28a745';
            });
            
            phoneElement.addEventListener('mouseleave', function() {
                this.style.backgroundColor = '#e8f4fd';
                this.style.borderColor = '#0066cc';
                this.style.color = '#0066cc';
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            phoneElement.addEventListener('click', function() {
                copyToClipboard(phone);
                
                // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ –∫–ª–∏–∫–µ
                const originalBg = this.style.backgroundColor;
                const originalColor = this.style.color;
                this.style.backgroundColor = '#28a745';
                this.style.color = 'white';
                
                setTimeout(() => {
                    this.style.backgroundColor = originalBg;
                    this.style.color = originalColor;
                }, 200);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º tooltip
            phoneElement.title = '–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä';
            
            numbersContainer.appendChild(phoneElement);
        });
        
        phoneBlock.appendChild(numbersContainer);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        correctButton.parentNode.insertBefore(phoneBlock, correctButton.nextSibling);
        
        console.log('Content: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:', phoneNumbers.length);
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    addCorrectButton();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
        startMonitoring();
        console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤');
    }, 2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
    let updateTimeout = null;
    const buttonObserver = new MutationObserver(() => {
        addCorrectButton();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if (updateTimeout) {
            clearTimeout(updateTimeout);
        }
        updateTimeout = setTimeout(() => {
            updatePhoneNumbersDisplay();
        }, 500);
    });
    
    buttonObserver.observe(document.body, {
        childList: true,
        subtree: true
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —á–∞—Ç–∞
    let lastUrl = location.href;
    setInterval(() => {
        if (location.href !== lastUrl) {
            lastUrl = location.href;
            console.log('Content: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ URL, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');
            setTimeout(() => {
                updatePhoneNumbersDisplay();
            }, 1000);
        }
    }, 1000);
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ (–¥–ª—è SPA)
    window.addEventListener('popstate', () => {
        console.log('Content: Popstate event, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');
        setTimeout(() => {
            updatePhoneNumbersDisplay();
        }, 1000);
    });
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º pushState –∏ replaceState –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const originalPushState = history.pushState;
    const originalReplaceState = history.replaceState;
    
    history.pushState = function() {
        originalPushState.apply(history, arguments);
        console.log('Content: PushState detected, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');
        setTimeout(() => {
            updatePhoneNumbersDisplay();
        }, 1000);
    };
    
    history.replaceState = function() {
        originalReplaceState.apply(history, arguments);
        console.log('Content: ReplaceState detected, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤');
        setTimeout(() => {
            updatePhoneNumbersDisplay();
        }, 1000);
    };
    
})();