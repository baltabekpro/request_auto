// Background script –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π API –∫–æ–Ω—Ñ–∏–≥
importScripts('api-config.js');
importScripts('config-manager.js');

class ChatMonitorBackground {
    constructor() {
        this.configManager = new ConfigManager();
        this.notifiedChats = new Set(); // –•—Ä–∞–Ω–µ–Ω–∏–µ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
        this.settings = {
            enabled: true,
            notificationInterval: 20, // –º–∏–Ω—É—Ç—ã
            soundEnabled: true
        };
        
        this.init();
    }
    
    async init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ storage
        await this.loadSettings();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        console.log('Chat Monitor Background Script –∑–∞–ø—É—â–µ–Ω');
    }
    
    async loadSettings() {
        try {
            const result = await chrome.storage.sync.get(['chatMonitorSettings']);
            if (result.chatMonitorSettings) {
                this.settings = { ...this.settings, ...result.chatMonitorSettings };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }
    
    async saveSettings() {
        try {
            await chrome.storage.sync.set({ chatMonitorSettings: this.settings });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }
    
    setupEventListeners() {
        // –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç content script
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            this.handleMessage(request, sender, sendResponse);
            return true; // –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        chrome.runtime.onInstalled.addListener(() => {
            this.onInstalled();
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
        chrome.notifications.onClicked.addListener((notificationId) => {
            this.handleNotificationClick(notificationId);
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        chrome.notifications.onButtonClicked.addListener((notificationId, buttonIndex) => {
            this.handleNotificationButtonClick(notificationId, buttonIndex);
        });
        
        // –°–ª—É—à–∞—Ç–µ–ª—å –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        chrome.commands.onCommand.addListener(async (command) => {
            if (command === 'correct-text') {
                await this.handleCorrectTextCommand();
            }
        });
    }
    
    async handleMessage(request, sender, sendResponse) {
        try {
            switch (request.type) {
                case 'CHAT_NEEDS_CLOSING':
                    await this.handleChatNeedsClosing(request, sender);
                    sendResponse({ success: true });
                    break;
                    
                case 'GET_SETTINGS':
                    sendResponse({ settings: this.settings });
                    break;
                    
                case 'UPDATE_SETTINGS':
                    this.settings = { ...this.settings, ...request.settings };
                    await this.saveSettings();
                    sendResponse({ success: true });
                    break;
                    
                case 'CLEAR_NOTIFICATIONS':
                    this.notifiedChats.clear();
                    sendResponse({ success: true });
                    break;
                    
                case 'CORRECT_ALL_TEXT':
                    console.log('Background: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞');
                    const result = await this.correctAllTextInActiveElement(sender.tab.id, request.apiKey);
                    sendResponse(result);
                    break;
                    
                case 'GET_API_KEY':
                    const apiKeys = await this.getApiKeys();
                    sendResponse({ apiKey: apiKeys.length > 0 ? apiKeys[0] : null });
                    break;
                    
                case 'GET_STATISTICS':
                    const stats = await this.getStatistics();
                    sendResponse({ stats });
                    break;
                    
                default:
                    sendResponse({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è' });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            sendResponse({ error: error.message });
        }
    }
    
    async handleChatNeedsClosing(request, sender) {
        if (!this.settings.enabled) {
            return;
        }
        
        const chatKey = `${request.chatId}_${sender.tab.id}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        if (this.notifiedChats.has(chatKey)) {
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö
        this.notifiedChats.add(chatKey);
        
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await this.createNotification(request, sender.tab);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
        setTimeout(() => {
            this.notifiedChats.delete(chatKey);
        }, 5 * 60 * 1000);
    }
    
    async createNotification(chatInfo, tab) {
        const notificationId = `chat_${chatInfo.chatId}_${Date.now()}`;
        
        const notificationOptions = {
            type: 'basic',
            iconUrl: 'icons/icon48.png',
            title: '‚ö†Ô∏è –ß–∞—Ç —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
            message: `–ß–∞—Ç ${chatInfo.chatId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω —É–∂–µ ${chatInfo.timeSinceLastMessage} –º–∏–Ω—É—Ç.\\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —á–∞—Ç.`,
            buttons: [
                { title: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É' },
                { title: '‚ùå –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' }
            ],
            requireInteraction: true
        };
        
        try {
            await chrome.notifications.create(notificationId, notificationOptions);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
            await chrome.storage.local.set({
                [`notification_${notificationId}`]: {
                    chatId: chatInfo.chatId,
                    tabId: tab.id,
                    url: chatInfo.url || tab.url,
                    timestamp: Date.now()
                }
            });
            
            console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —á–∞—Ç–∞ ${chatInfo.chatId}`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
    
    async handleNotificationClick(notificationId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            const result = await chrome.storage.local.get([`notification_${notificationId}`]);
            const notificationData = result[`notification_${notificationId}`];
            
            if (notificationData) {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —á–∞—Ç–æ–º
                await chrome.tabs.update(notificationData.tabId, { active: true });
                await chrome.windows.update(chrome.windows.WINDOW_ID_CURRENT, { focused: true });
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await chrome.notifications.clear(notificationId);
            
            // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await chrome.storage.local.remove([`notification_${notificationId}`]);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', error);
        }
    }
    
    async handleNotificationButtonClick(notificationId, buttonIndex) {
        try {
            if (buttonIndex === 0) {
                // –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É"
                await this.handleNotificationClick(notificationId);
            } else if (buttonIndex === 1) {
                // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                await chrome.notifications.clear(notificationId);
                await chrome.storage.local.remove([`notification_${notificationId}`]);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }
    
    onInstalled() {
        console.log('Chat Monitor Extension —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        chrome.contextMenus.create({
            id: 'chatMonitorToggle',
            title: '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–æ–≤',
            contexts: ['page']
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        this.updateIcon();
    }
    
    async updateIcon() {
        const iconPath = this.settings.enabled ? 'icons/icon48.png' : 'icons/icon48_disabled.png';
        
        try {
            await chrome.action.setIcon({ path: iconPath });
            await chrome.action.setTitle({ 
                title: this.settings.enabled ? 
                    'Chat Monitor - –ê–∫—Ç–∏–≤–µ–Ω' : 
                    'Chat Monitor - –û—Ç–∫–ª—é—á–µ–Ω' 
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏:', error);
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStatistics() {
        try {
            const result = await chrome.storage.local.get();
            const notifications = Object.keys(result)
                .filter(key => key.startsWith('notification_'))
                .map(key => result[key]);
                
            return {
                activeNotifications: notifications.length,
                notifiedChatsCount: this.notifiedChats.size,
                isEnabled: this.settings.enabled
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return {
                activeNotifications: 0,
                notifiedChatsCount: 0,
                isEnabled: this.settings.enabled
            };
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    async handleCorrectTextCommand() {
        const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
        if (!tab || !tab.id) return;
        
        await this.correctAllTextInActiveElement(tab.id);
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
    async correctAllTextInActiveElement(tabId, providedApiKey = null) {
        try {
            console.log('Background: –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...');
            console.log('Background: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API –∫–ª—é—á:', providedApiKey ? '–¥–∞' : '–Ω–µ—Ç');
            
            let apiKey = providedApiKey;
            
            // –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ storage
            if (!apiKey) {
                const apiKeys = await this.getApiKeys();
                console.log('Background: –ü–æ–ª—É—á–µ–Ω—ã API –∫–ª—é—á–∏ –∏–∑ storage:', apiKeys.length, '—à—Ç.');
                
                if (!apiKeys.length) {
                    console.log('Background: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    await chrome.tabs.sendMessage(tabId, { 
                        action: 'showNotification', 
                        message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini API –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', 
                        type: 'error' 
                    });
                    return { success: false, error: 'No Gemini API key found' };
                }
                
                apiKey = apiKeys[0];
            }
            
            console.log('Background: –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á –¥–ª–∏–Ω–æ–π:', apiKey.length, '—Å–∏–º–≤–æ–ª–æ–≤');

            // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const textResp = await chrome.tabs.sendMessage(tabId, { action: 'getAllTextFromActiveElement' });
            const allText = textResp?.text || '';

            if (!allText.trim()) {
                await chrome.tabs.sendMessage(tabId, { 
                    action: 'showNotification', 
                    message: '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ', 
                    type: 'error' 
                });
                return { success: false, error: 'No text found' };
            }

            await chrome.tabs.sendMessage(tabId, { 
                action: 'showNotification', 
                message: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò‚Ä¶', 
                type: 'info' 
            });

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
            const correctedText = await this.correctTextWithAI(allText, apiKey);

            if (correctedText) {
                if (correctedText.startsWith('–û—à–∏–±–∫–∞ API:')) {
                    await chrome.tabs.sendMessage(tabId, { 
                        action: 'showNotification', 
                        message: correctedText, 
                        type: 'error' 
                    });
                    return { success: false, error: correctedText };
                } else {
                    // –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                    await chrome.tabs.sendMessage(tabId, { 
                        action: 'replaceAllTextInActiveElement', 
                        newText: correctedText 
                    });
                    await chrome.tabs.sendMessage(tabId, { 
                        action: 'showNotification', 
                        message: '–ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω', 
                        type: 'success' 
                    });
                    return { success: true, correctedText };
                }
            } else {
                await chrome.tabs.sendMessage(tabId, { 
                    action: 'showNotification', 
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç', 
                    type: 'error' 
                });
                return { success: false, error: 'AI correction failed' };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error);
            try {
                await chrome.tabs.sendMessage(tabId, { 
                    action: 'showNotification', 
                    message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞', 
                    type: 'error' 
                });
            } catch (_) {}
            return { success: false, error: error.message };
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async getApiKeys() {
        try {
            console.log('Background: –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –∫–æ–¥–∞...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ api-config.js
            if (typeof getGeminiApiKey === 'function') {
                const apiKey = getGeminiApiKey();
                if (apiKey) {
                    console.log('Background: API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ, –¥–ª–∏–Ω–∞:', apiKey.length);
                    return [apiKey];
                }
            }
            
            console.log('Background: –ü—Ä–æ–±—É–µ–º ConfigManager –∫–∞–∫ fallback...');
            // Fallback –∫ ConfigManager
            const apiKey = await this.configManager.getApiKey();
            
            if (apiKey && apiKey.trim()) {
                console.log('Background: API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ ConfigManager, –¥–ª–∏–Ω–∞:', apiKey.length);
                return [apiKey.trim()];
            }
            
            console.log('Background: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ');
            return [];
            
        } catch (error) {
            console.error('Background: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–µ–π:', error);
            return [];
        }
    }
    
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini AI
    async correctTextWithAI(text, apiKey) {
        try {
            // –ó–∞–ø—Ä–æ—Å –∫ Google Gemini API –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            const prompt = `–ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Å—Ç–∏–ª—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–µ–∫—Å—Ç–µ. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:

${text}`;

            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        maxOutputTokens: 2048,
                        temperature: 0.1
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            
            if (data.candidates && data.candidates[0] && data.candidates[0].content) {
                const correctedText = data.candidates[0].content.parts[0].text.trim();
                return correctedText;
            } else {
                throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Gemini API:', error);
            return `–û—à–∏–±–∫–∞ API: ${error.message}`;
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
const chatMonitor = new ChatMonitorBackground();